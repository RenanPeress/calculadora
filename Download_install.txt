# Código para API Django REST (servir APKs)

# api/views.py
from rest_framework import viewsets
from rest_framework.response import Response
from .models import APK
from .serializers import APKSerializer

class APKViewSet(viewsets.ModelViewSet):
    queryset = APK.objects.all()
    serializer_class = APKSerializer

# api/urls.py
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import APKViewSet

router = DefaultRouter()
router.register(r'apks', APKViewSet)

urlpatterns = [
    path('', include(router.urls)),
]

# api/serializers.py
from rest_framework import serializers
from .models import APK

class APKSerializer(serializers.ModelSerializer):
    class Meta:
        model = APK
        fields = '__all__'

# api/models.py
from django.db import models

class APK(models.Model):
    name = models.CharField(max_length=255)
    file = models.FileField(upload_to='apks/')

# templates/download.html
<form action="{% url 'download_apk' %}" method="POST">
  {% csrf_token %}
  {% for apk in apks %}
    <div>
      {{ apk.name }}
      <button type="submit" name="apk_id" value="{{ apk.id }}">Download & Install</button>
    </div>
  {% endfor %}
</form>

# views.py para servir e baixar APK
import subprocess, requests
from django.shortcuts import render, redirect
from .models import APK

def download_apk(request):
    if request.method == 'POST':
        apk = APK.objects.get(id=request.POST['apk_id'])
        file_path = apk.file.path
        subprocess.run(['adb', 'install', file_path])  # Se executado no cliente
    return redirect('home')

# Se não funcionar diretamente no Django, implementarei o app auxiliar em Python com PyQt5 para consumir esta API, baixar o APK e executar o ADB localmente.










// Implementação WebUSB para comunicação direta com dispositivos Android via navegador

// templates/download.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Instalar APK via WebUSB</title>
    <script>
        async function installAPK() {
            try {
                const device = await navigator.usb.requestDevice({ filters: [{ vendorId: 0x18D1 }] }); // Google Android
                await device.open();
                await device.selectConfiguration(1);
                await device.claimInterface(0);

                const apkResponse = await fetch('/path/to/apk');
                const apkData = await apkResponse.arrayBuffer();

                const command = new TextEncoder().encode('adb install /path/to/apk');

                await device.transferOut(1, command);
                console.log('Comando enviado para instalação.');
            } catch (error) {
                console.error('Erro durante a instalação:', error);
            }
        }
    </script>
</head>
<body>
    <h1>Instalação de APK via WebUSB</h1>
    <button onclick="installAPK()">Instalar APK</button>
</body>
</html>

# views.py e API Django permanecem como backend para servir os APKs.

# Observação: A WebUSB requer HTTPS e permissões específicas no navegador.
